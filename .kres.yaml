kind: golang.Generate
spec:
  versionPackagePath: internal/version
---
kind: golang.Build
spec:
  outputs:
    linux-amd64:
      GOOS: linux
      GOARCH: amd64
    linux-arm64:
      GOOS: linux
      GOARCH: arm64
---
kind: golang.Toolchain
spec:
  makefile:
    extraVariables:
      - name: PKGS_PREFIX
        defaultValue: ghcr.io/siderolabs
      - name: PKGS
        defaultValue: v1.11.0-alpha.0-17-g2563e47
  docker:
    extraArgs:
      - PKGS_PREFIX
      - PKGS
---
kind: common.Docker
spec:
  extraBuildArgs:
    - PKGS_PREFIX
    - PKGS
---
kind: common.Image
name: image-image-factory
spec:
  extraEnvironment:
    PLATFORM: linux/amd64,linux/arm64
  additionalImages: [] # so we copy same fhs and ca-certificates as the version of other tools
  allowedLocalPaths:
    - tailwind.config.js
    - package.json
    - package-lock.json
  dependsOn:
    - tailwind
  entrypoint: /usr/bin/image-factory
  copyFrom:
    - name: imager-tools
      stage: imager-tools
---
kind: auto.CustomSteps
spec:
  steps:
    - name: imager-base
      toplevel: true
    - name: imager-tools
      toplevel: true
    - name: integration.test
      toplevel: true
    - name: integration
      toplevel: true
      dependants:
        - coverage
    - name: update-to-talos-main
      toplevel: true
    - name: integration-talos-main
      toplevel: true
    - name: tailwind
      toplevel: true
---
kind: custom.Step
name: imager-base
spec:
  makefile:
    enabled: true
    phony: true
  docker:
    enabled: true
    stages:
      - name: pkg-fhs
        from: ${PKGS_PREFIX}/fhs:${PKGS}
      - name: pkg-ca-certificates
        from: ${PKGS_PREFIX}/ca-certificates:${PKGS}
      - name: pkg-musl
        from: ${PKGS_PREFIX}/musl:${PKGS}
      - name: pkg-cpio
        from: ${PKGS_PREFIX}/cpio:${PKGS}
      - name: pkg-dosfstools
        from: ${PKGS_PREFIX}/dosfstools:${PKGS}
      - name: pkg-grub
        from: ${PKGS_PREFIX}/grub:${PKGS}
      - name: pkg-grub-amd64
        from: ${PKGS_PREFIX}/grub:${PKGS}
        platform: linux/amd64
      - name: pkg-grub-arm64
        from: ${PKGS_PREFIX}/grub:${PKGS}
        platform: linux/arm64
      - name: pkg-grub-unicode
        from: ${PKGS_PREFIX}/installer:v1.9.4
      - name: pkg-kmod
        from: ${PKGS_PREFIX}/kmod:${PKGS}
      - name: pkg-libattr
        from: ${PKGS_PREFIX}/libattr:${PKGS}
      - name: pkg-libinih
        from: ${PKGS_PREFIX}/libinih:${PKGS}
      - name: pkg-liblzma
        from: ${PKGS_PREFIX}/liblzma:${PKGS}
      - name: pkg-liburcu
        from: ${PKGS_PREFIX}/liburcu:${PKGS}
      - name: pkg-openssl
        from: ${PKGS_PREFIX}/openssl:${PKGS}
      - name: pkg-open-vmdk
        from: ${PKGS_PREFIX}/open-vmdk:${PKGS}
      - name: pkg-xfsprogs
        from: ${PKGS_PREFIX}/xfsprogs:${PKGS}
      - name: pkg-e2fsprogs
        from: ${PKGS_PREFIX}/e2fsprogs:${PKGS}
      - name: pkg-glib
        from: ${PKGS_PREFIX}/glib:${PKGS}
      - name: pkg-libburn
        from: ${PKGS_PREFIX}/libburn:${PKGS}
      - name: pkg-libisoburn
        from: ${PKGS_PREFIX}/libisoburn:${PKGS}
      - name: pkg-libisofs
        from: ${PKGS_PREFIX}/libisofs:${PKGS}
      - name: pkg-mtools
        from: ${PKGS_PREFIX}/mtools:${PKGS}
      - name: pkg-pcre2
        from: ${PKGS_PREFIX}/pcre2:${PKGS}
      - name: pkg-pigz
        from: ${PKGS_PREFIX}/pigz:${PKGS}
      - name: pkg-qemu-tools
        from: ${PKGS_PREFIX}/qemu-tools:${PKGS}
      - name: pkg-squashfs-tools
        from: ${PKGS_PREFIX}/squashfs-tools:${PKGS}
      - name: pkg-tar
        from: ${PKGS_PREFIX}/tar:${PKGS}
      - name: pkg-xz
        from: ${PKGS_PREFIX}/xz:${PKGS}
      - name: pkg-zlib
        from: ${PKGS_PREFIX}/zlib:${PKGS}
      - name: pkg-zstd
        from: ${PKGS_PREFIX}/zstd:${PKGS}
---
kind: custom.Step
name: imager-tools
spec:
  makefile:
    enabled: true
    phony: true
  docker:
    enabled: true
    stages:
      - name: imager-tools
        description: copies the imager tools
        steps:
          - copy:
              from: pkg-fhs
              src: /
              dst: /
          - copy:
              from: pkg-ca-certificates
              src: /
              dst: /
          - copy:
              from: pkg-musl
              src: /
              dst: /
          - copy:
              from: pkg-cpio
              src: /
              dst: /
          - copy:
              from: pkg-dosfstools
              src: /
              dst: /
          - copy:
              from: pkg-grub
              src: /
              dst: /
          - copy:
              from: pkg-grub-amd64
              src: /usr/lib/grub
              dst: /usr/lib/grub
          - copy:
              from: pkg-grub-arm64
              src: /usr/lib/grub
              dst: /usr/lib/grub
          - copy:
              from: pkg-grub-unicode
              src: /usr/share/grub/unicode.pf2
              dst: /usr/share/grub/unicode.pf2
          - copy:
              from: pkg-kmod
              src: /
              dst: /
          - copy:
              from: pkg-libattr
              src: /
              dst: /
          - copy:
              from: pkg-libinih
              src: /
              dst: /
          - copy:
              from: pkg-liblzma
              src: /
              dst: /
          - copy:
              from: pkg-liburcu
              src: /
              dst: /
          - copy:
              from: pkg-openssl
              src: /
              dst: /
          - copy:
              from: pkg-open-vmdk
              src: /
              dst: /
          - copy:
              from: pkg-xfsprogs
              src: /
              dst: /
          - copy:
              from: pkg-e2fsprogs
              src: /
              dst: /
          - copy:
              from: pkg-glib
              src: /
              dst: /
          - copy:
              from: pkg-libburn
              src: /
              dst: /
          - copy:
              from: pkg-libisoburn
              src: /
              dst: /
          - copy:
              from: pkg-libisofs
              src: /
              dst: /
          - copy:
              from: pkg-mtools
              src: /
              dst: /
          - copy:
              from: pkg-pcre2
              src: /
              dst: /
          - copy:
              from: pkg-pigz
              src: /
              dst: /
          - copy:
              from: pkg-qemu-tools
              src: /
              dst: /
          - copy:
              from: pkg-squashfs-tools
              src: /
              dst: /
          - copy:
              from: pkg-tar
              src: /
              dst: /
          - copy:
              from: pkg-xz
              src: /
              dst: /
          - copy:
              from: pkg-zlib
              src: /
              dst: /
          - copy:
              from: pkg-zstd
              src: /
              dst: /
---
kind: custom.Step
name: integration.test
spec:
  docker:
    enabled: true
    stages:
      - name: integration-build
        description: builds the integration test binary
        from: base
        steps:
          - script:
              command: go test -c -covermode=atomic -coverpkg=./... -tags integration ./internal/integration
              cache:
                - /root/.cache/go-build
                - /go/pkg
      - name: integration.test
        description: copies out the integration test binary
        steps:
          - copy:
              from: integration-build
              src: /src/integration.test
              dst: /integration.test
  makefile:
    enabled: true
    phony: true
    script:
      - "@$(MAKE) local-$@ DEST=$(ARTIFACTS)"
---
kind: custom.Step
name: update-to-talos-main
spec:
  docker:
    enabled: true
    stages:
      - name: update-to-talos-main
        description: updates go.mod to use the latest talos main
        from: base
        steps:
          - script:
              command: go get -u github.com/siderolabs/talos@main
              cache:
                - /root/.cache/go-build
                - /go/pkg
          - script:
              command: go get -u github.com/siderolabs/talos/pkg/machinery@main
              cache:
                - /root/.cache/go-build
                - /go/pkg
      - name: copy-out-go-mod
        description: copies out the go.mod and go.sum
        steps:
          - copy:
              from: update-to-talos-main
              src: /src/go.mod
              dst: /go.mod
          - copy:
              from: update-to-talos-main
              src: /src/go.sum
              dst: /go.sum
  makefile:
    enabled: true
    phony: true
    script:
      - "@$(MAKE) local-copy-out-go-mod DEST=. TARGET_ARGS=\"--no-cache-filter=update-to-talos-main\""
---
kind: custom.Step
name: integration
spec:
  makefile:
    enabled: true
    phony: true
    depends:
      - integration.test
    variables:
      - name: RUN_TESTS
        defaultValue: TestIntegration
      - name: TEST_FLAGS
        defaultValue: ""
    script:
      - "@$(MAKE) image-image-factory PUSH=true"
      - docker pull $(REGISTRY)/$(USERNAME)/image-factory:$(TAG)
      - docker rm -f local-if || true
      - docker run -d -p 5100:5000 --name=local-if registry:3
      - docker run --rm --net=host --privileged -v /dev:/dev -v $(PWD)/$(ARTIFACTS)/:/out/ -v $(PWD)/$(ARTIFACTS)/integration.test:/bin/integration.test:ro --entrypoint /bin/integration.test $(REGISTRY)/$(USERNAME)/image-factory:$(TAG) -test.v $(TEST_FLAGS) -test.coverprofile=/out/coverage.txt -test.run $(RUN_TESTS)
      - mv $(ARTIFACTS)/coverage.txt coverage-integration.txt
      - docker rm -f local-if
  ghaction:
    enabled: true
    condition: on-pull-request
    environment:
      REGISTRY: registry.dev.siderolabs.io
      TEST_FLAGS: "-test.schematic-service-repository=127.0.0.1:5100/image-factory/schematic -test.installer-external-repository=127.0.0.1:5100/siderolabs -test.installer-internal-repository=127.0.0.1:5100/siderolabs -test.cache-repository=127.0.0.1:5100/image-factory/cache"
---
kind: custom.Step
name: integration-talos-main
spec:
  makefile:
    enabled: true
    phony: true
    depends:
      - update-to-talos-main
    variables:
      - name: RUN_TESTS
        defaultValue: TestIntegration
      - name: TEST_FLAGS
        defaultValue: ""
    script:
        - "@$(MAKE) integration"
  ghaction:
    enabled: true
    cronOnly: true
    environment:
      REGISTRY: registry.dev.siderolabs.io
      TEST_FLAGS: "-test.schematic-service-repository=registry.dev.siderolabs.io/image-factory/schematic -test.installer-external-repository=registry.dev.siderolabs.io/siderolabs -test.installer-internal-repository=registry.dev.siderolabs.io/siderolabs -test.cache-repository=registry.dev.siderolabs.io/image-factory/cache"
    jobs:
      - name: integration-talos-main
        runnerLabels:
          - generic
        triggerLabels:
        - integration/talos-main
        crons:
          - '30 7 * * *'
---
kind: common.Build
spec:
  ignoredPaths:
    - node_modules/
    - coverage*.txt
---
kind: service.CodeCov
spec:
  targetThreshold: 9 # the actual coverage is much higher and reported from the integration test
  inputPaths:
    - coverage-integration.txt
---
kind: custom.Step
name: tailwind
spec:
  makefile:
    enabled: true
    phony: true
    script:
      - "@$(MAKE) local-tailwind-copy PUSH=false DEST=. PLATFORM=$(OPERATING_SYSTEM)/$(GOARCH)"
  docker:
    description: "Runs tailwind update"
    enabled: true
    stages:
      - name: tailwind-base
        description: "Installs tailwindcss"
        from: docker.io/oven/bun:1.2.4-alpine
        platform: "${BUILDPLATFORM}"
        workdir: /src
        steps:
          - copy:
              src: package.json package-lock.json
              dst: .
          - script:
              cache:
                - /src/node_modules
              command: bun install
      - name: tailwind-update
        description: "tailwind update"
        from: tailwind-base
        steps:
          - copy:
              src: tailwind.config.js
              dst: .
          - copy:
              src: internal/frontend/http
              dst: internal/frontend/http
          - script:
              cache:
                - /src/node_modules
              command: node_modules/.bin/tailwindcss -i internal/frontend/http/css/input.css -o internal/frontend/http/css/output.css --minify
      - name: tailwind-copy
        description: "Copies assets"
        steps:
          - copy:
              from: tailwind-update
              src: /src/internal/frontend/http/css/output.css
              dst: internal/frontend/http/css/output.css
